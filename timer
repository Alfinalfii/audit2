<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Timer</title>
    <style>
        .timer {
            font-size: 1.5em;
            margin-top: 20px;
            text-align: center;
        }
        .speed {
            font-size: 0.8em;
            margin-top: 5px;
            text-align: center;
        }
        .button-container {
            text-align: center;
            margin-top: 20px;
        }
        .button-container button {
            margin: 0 10px;
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
        }
        .jump-input {
            margin-top: 10px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="dropdown">
        <select id="hoursDropdown">
            <option value="0">Select Hours</option>
            <!-- Generating options from 1 to 24 -->
            <!-- You can use JavaScript to generate this HTML dynamically -->
            <!-- Here, for simplicity, I'll manually add the options -->
            <script>
                for (let i = 0; i <= 23; i++) {
                    document.write(`<option value="${i}">${i}</option>`);
                }
            </script>
        </select>
    </div>

    <div class="timer" id="timerDisplay">00:00:00</div>
    <div class="speed" id="speedDisplay">1x</div>

    <div class="button-container">
        <button id="increaseSpeed">Increase Speed</button>
        <button id="decreaseSpeed">Decrease Speed</button>
        <button id="startButton">Start</button>
        <button id="stopButton">Stop</button>
    </div>

    <div class="jump-input">
        <input type="number" id="jumpInput" placeholder="Jump to (minutes)">
        <button id="jumpButton">Jump</button>
    </div>

    <script>
        const hoursDropdown = document.getElementById('hoursDropdown');
        const timerDisplay = document.getElementById('timerDisplay');
        const speedDisplay = document.getElementById('speedDisplay');
        const startButton = document.getElementById('startButton');
        const stopButton = document.getElementById('stopButton');
        const increaseSpeedButton = document.getElementById('increaseSpeed');
        const decreaseSpeedButton = document.getElementById('decreaseSpeed');
        const jumpInput = document.getElementById('jumpInput');
        const jumpButton = document.getElementById('jumpButton');
        let timerInterval;
        let timerSpeedIndex = 0; // Index to track current speed
        const timerSpeeds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
        let seconds = 0;
        let minutes = 0;
        let hours = 0;
        let timerRunning = false;

        // Function to update the timer display
        function updateTimerDisplay() {
            const formattedTime = pad(hours) + ':' + pad(minutes) + ':' + pad(seconds);
            timerDisplay.textContent = formattedTime;
            speedDisplay.textContent = timerSpeeds[timerSpeedIndex] + 'x'; // Update speed display
        }

        // Function to start the timer
        function startTimer() {
            if (!timerInterval) {
                let intervalTime = 1000 / timerSpeeds[timerSpeedIndex]; // Calculate interval time based on speed
                timerInterval = setInterval(() => {
                    seconds++;
                    if (seconds === 60) {
                        seconds = 0;
                        minutes++;
                        if (minutes === 60) {
                            minutes = 0;
                            hours++;
                        }
                    }
                    updateTimerDisplay();
                }, intervalTime);
            }
            timerRunning = true;
        }

        // Function to stop the timer
        function stopTimer() {
            clearInterval(timerInterval);
            timerInterval = null;
            timerRunning = false;
        }

        // Helper function to pad numbers with leading zeros
        function pad(num) {
            return num < 10 ? '0' + num : num;
        }

        // Event listener for dropdown change
        hoursDropdown.addEventListener('change', () => {
            hours = parseInt(hoursDropdown.value);
            updateTimerDisplay();
        });

        // Event listener for start button click
        startButton.addEventListener('click', () => {
            if (!timerRunning) {
                startTimer();
            } else {
                stopTimer();
            }
        });

        // Event listener for stop button click
        stopButton.addEventListener('click', () => {
            stopTimer();
        });

        // Event listener for increase speed button click
        increaseSpeedButton.addEventListener('click', () => {
            timerSpeedIndex = (timerSpeedIndex + 1) % timerSpeeds.length; // Increment index and wrap around
            updateTimerDisplay(); // Update timer display immediately
            // If timer is running, adjust interval time
            if (timerInterval) {
                clearInterval(timerInterval);
                startTimer();
            }
        });

        // Event listener for decrease speed button click
        decreaseSpeedButton.addEventListener('click', () => {
            timerSpeedIndex = (timerSpeedIndex - 1 + timerSpeeds.length) % timerSpeeds.length; // Decrement index and wrap around
            updateTimerDisplay(); // Update timer display immediately
            // If timer is running, adjust interval time
            if (timerInterval) {
                clearInterval(timerInterval);
                startTimer();
            }
        });

        // Event listener for jump button click
        jumpButton.addEventListener('click', () => {
            const jumpMinutes = parseInt(jumpInput.value);
            if (!isNaN(jumpMinutes)) {
                minutes = jumpMinutes % 60;
                hours = Math.floor(jumpMinutes / 60); // Update hours
                updateTimerDisplay();
            }
        });

        // Event listener for spacebar press
document.addEventListener('keydown', (event) => {
    if (event.code === 'Space') {
        event.preventDefault(); // Prevent default spacebar behavior (like scrolling)
        if (!timerRunning) {
            startTimer();
        } else {
            stopTimer();
        }
    }
});

        // Initial update of speed button text
        updateTimerDisplay();
    </script>
</body>
</html>
